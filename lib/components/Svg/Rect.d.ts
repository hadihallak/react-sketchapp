import * as React from 'react';
import * as PropTypes from 'prop-types';
declare const propTypes: {
    x: PropTypes.Validator<string | number>;
    y: PropTypes.Validator<string | number>;
    width: PropTypes.Validator<string | number>;
    height: PropTypes.Validator<string | number>;
    rx: PropTypes.Requireable<string | number>;
    ry: PropTypes.Requireable<string | number>;
    name: PropTypes.Requireable<string>;
    scale: PropTypes.Requireable<string | number>;
    scaleX: PropTypes.Requireable<string | number>;
    scaleY: PropTypes.Requireable<string | number>;
    rotate: PropTypes.Requireable<string | number>;
    rotation: PropTypes.Requireable<string | number>;
    translate: PropTypes.Requireable<string | number>;
    translateX: PropTypes.Requireable<string | number>;
    translateY: PropTypes.Requireable<string | number>;
    origin: PropTypes.Requireable<string | number>;
    originX: PropTypes.Requireable<string | number>;
    originY: PropTypes.Requireable<string | number>;
    skew: PropTypes.Requireable<string | number>;
    skewX: PropTypes.Requireable<string | number>;
    skewY: PropTypes.Requireable<string | number>;
    transform: PropTypes.Requireable<string | object>;
    clipRule: PropTypes.Requireable<string>;
    clipPath: PropTypes.Requireable<string>;
    stroke: PropTypes.Requireable<string>;
    strokeWidth: PropTypes.Requireable<string | number>;
    strokeOpacity: PropTypes.Requireable<string | number>;
    strokeDasharray: PropTypes.Requireable<string | number | (string | number | null | undefined)[]>;
    strokeDashoffset: PropTypes.Requireable<string | number>;
    strokeLinecap: PropTypes.Requireable<string>;
    strokeLinejoin: PropTypes.Requireable<string>;
    strokeAlignment: PropTypes.Requireable<string>;
    strokeMiterlimit: PropTypes.Requireable<string | number>;
    fill: PropTypes.Requireable<string>;
    fillOpacity: PropTypes.Requireable<string | number>;
    fillRule: PropTypes.Requireable<string>;
};
declare type Props = PropTypes.InferProps<typeof propTypes>;
export default class Rect extends React.Component<Props> {
    static propTypes: {
        x: PropTypes.Validator<string | number>;
        y: PropTypes.Validator<string | number>;
        width: PropTypes.Validator<string | number>;
        height: PropTypes.Validator<string | number>;
        rx: PropTypes.Requireable<string | number>;
        ry: PropTypes.Requireable<string | number>;
        name: PropTypes.Requireable<string>;
        scale: PropTypes.Requireable<string | number>;
        scaleX: PropTypes.Requireable<string | number>;
        scaleY: PropTypes.Requireable<string | number>;
        rotate: PropTypes.Requireable<string | number>;
        rotation: PropTypes.Requireable<string | number>;
        translate: PropTypes.Requireable<string | number>;
        translateX: PropTypes.Requireable<string | number>;
        translateY: PropTypes.Requireable<string | number>;
        origin: PropTypes.Requireable<string | number>;
        originX: PropTypes.Requireable<string | number>;
        originY: PropTypes.Requireable<string | number>;
        skew: PropTypes.Requireable<string | number>;
        skewX: PropTypes.Requireable<string | number>;
        skewY: PropTypes.Requireable<string | number>;
        transform: PropTypes.Requireable<string | object>;
        clipRule: PropTypes.Requireable<string>;
        clipPath: PropTypes.Requireable<string>;
        stroke: PropTypes.Requireable<string>;
        strokeWidth: PropTypes.Requireable<string | number>;
        strokeOpacity: PropTypes.Requireable<string | number>;
        strokeDasharray: PropTypes.Requireable<string | number | (string | number | null | undefined)[]>;
        strokeDashoffset: PropTypes.Requireable<string | number>;
        strokeLinecap: PropTypes.Requireable<string>;
        strokeLinejoin: PropTypes.Requireable<string>;
        strokeAlignment: PropTypes.Requireable<string>;
        strokeMiterlimit: PropTypes.Requireable<string | number>;
        fill: PropTypes.Requireable<string>;
        fillOpacity: PropTypes.Requireable<string | number>;
        fillRule: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        x: number;
        y: number;
        width: number;
        height: number;
        rx: number;
        ry: number;
    };
    render(): JSX.Element;
}
export {};
