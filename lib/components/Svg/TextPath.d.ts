import * as React from 'react';
import * as PropTypes from 'prop-types';
import { textPathProps } from './props';
declare type Props = PropTypes.InferProps<typeof textPathProps>;
export default class TextPath extends React.Component<Props> {
    static propTypes: {
        href: PropTypes.Validator<string>;
        startOffset: PropTypes.Requireable<string | number>;
        method: PropTypes.Requireable<string>;
        spacing: PropTypes.Requireable<string>;
        side: PropTypes.Requireable<string>;
        midLine: PropTypes.Requireable<string>;
        alignmentBaseline: PropTypes.Requireable<string>;
        baselineShift: PropTypes.Requireable<string | number | (string | number | null | undefined)[]>;
        verticalAlign: PropTypes.Requireable<string | number>;
        lengthAdjust: PropTypes.Requireable<string>;
        textLength: PropTypes.Requireable<string | number>;
        fontData: PropTypes.Requireable<object>;
        fontFeatureSettings: PropTypes.Requireable<string>;
        fontStyle: PropTypes.Requireable<string>;
        fontVariant: PropTypes.Requireable<string>;
        fontWeight: PropTypes.Requireable<string>;
        fontStretch: PropTypes.Requireable<string>;
        fontSize: PropTypes.Requireable<string | number>;
        fontFamily: PropTypes.Requireable<string>;
        textAnchor: PropTypes.Requireable<string>;
        textDecoration: PropTypes.Requireable<string>;
        letterSpacing: PropTypes.Requireable<string | number>;
        wordSpacing: PropTypes.Requireable<string | number>;
        kerning: PropTypes.Requireable<string | number>;
        fontVariantLigatures: PropTypes.Requireable<string>;
        font: PropTypes.Requireable<object>;
        name: PropTypes.Requireable<string>;
        scale: PropTypes.Requireable<string | number>;
        scaleX: PropTypes.Requireable<string | number>;
        scaleY: PropTypes.Requireable<string | number>;
        rotate: PropTypes.Requireable<string | number>;
        rotation: PropTypes.Requireable<string | number>;
        translate: PropTypes.Requireable<string | number>;
        translateX: PropTypes.Requireable<string | number>;
        translateY: PropTypes.Requireable<string | number>;
        x: PropTypes.Requireable<string | number>;
        y: PropTypes.Requireable<string | number>;
        origin: PropTypes.Requireable<string | number>;
        originX: PropTypes.Requireable<string | number>;
        originY: PropTypes.Requireable<string | number>;
        skew: PropTypes.Requireable<string | number>;
        skewX: PropTypes.Requireable<string | number>;
        skewY: PropTypes.Requireable<string | number>;
        transform: PropTypes.Requireable<string | object>;
        clipRule: PropTypes.Requireable<string>;
        clipPath: PropTypes.Requireable<string>;
        stroke: PropTypes.Requireable<string>;
        strokeWidth: PropTypes.Requireable<string | number>;
        strokeOpacity: PropTypes.Requireable<string | number>;
        strokeDasharray: PropTypes.Requireable<string | number | (string | number | null | undefined)[]>;
        strokeDashoffset: PropTypes.Requireable<string | number>;
        strokeLinecap: PropTypes.Requireable<string>;
        strokeLinejoin: PropTypes.Requireable<string>;
        strokeAlignment: PropTypes.Requireable<string>;
        strokeMiterlimit: PropTypes.Requireable<string | number>;
        fill: PropTypes.Requireable<string>;
        fillOpacity: PropTypes.Requireable<string | number>;
        fillRule: PropTypes.Requireable<string>;
    };
    render(): JSX.Element;
}
export {};
